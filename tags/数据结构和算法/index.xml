<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构和算法 on iNote</title>
    <link>/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构和算法 on iNote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>blog.luvnaxx.com</copyright>
    <lastBuildDate>Wed, 29 Jul 2020 11:02:09 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>无重复字符的最长子串</title>
      <link>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/longest-substring-without-repeating-characters/</link>
      <pubDate>Wed, 29 Jul 2020 11:02:09 +0800</pubDate>
      
      <guid>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/longest-substring-without-repeating-characters/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: &amp;ldquo;abcabcbb&amp;rdquo;
输出: 3 
解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
示例 2:&lt;/p&gt;
&lt;p&gt;输入: &amp;ldquo;bbbbb&amp;rdquo;
输出: 1
解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。
示例 3:&lt;/p&gt;
&lt;p&gt;输入: &amp;ldquo;pwwkew&amp;rdquo;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>滑动窗口法</title>
      <link>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%B3%95/</link>
      <pubDate>Tue, 28 Jul 2020 16:12:07 +0800</pubDate>
      
      <guid>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%B3%95/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/61564531&#34;&gt;Leetcode刷题总结之滑动窗口法（尺取法）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是为了抄袭，怕原链接失效，复制一份&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>两数相加</title>
      <link>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/add-two-numbers/</link>
      <pubDate>Tue, 28 Jul 2020 12:44:07 +0800</pubDate>
      
      <guid>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/add-two-numbers/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。&lt;/p&gt;
&lt;p&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p&gt;
&lt;p&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)
输出：7 -&amp;gt; 0 -&amp;gt; 8
原因：342 + 465 = 807&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>两数之和</title>
      <link>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/two-sum/</link>
      <pubDate>Tue, 28 Jul 2020 12:12:07 +0800</pubDate>
      
      <guid>/post/%E6%8A%80/datastructure_and_algorithm/leetcode/two-sum/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;给定 nums = [2, 7, 11, 15], target = 9&lt;/p&gt;
&lt;p&gt;因为 nums[0] + nums&lt;a href=&#34;https://blog-1252667810.cos.ap-shanghai.myqcloud.com/image/2020/07/5f441ab547c84b0086144b20849523df.png&#34;&gt;1&lt;/a&gt; = 2 + 7 = 9
所以返回 [0, 1]&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>/post/%E6%8A%80/datastructure_and_algorithm/sort/</link>
      <pubDate>Mon, 01 Jun 2020 12:44:07 +0800</pubDate>
      
      <guid>/post/%E6%8A%80/datastructure_and_algorithm/sort/</guid>
      <description>&lt;h1 id=&#34;冒泡排序选择排序插入排序希尔排序快速排序归并排序基数排序&#34;&gt;冒泡排序/选择排序/插入排序/希尔排序/快速排序/归并排序/基数排序&lt;/h1&gt;</description>
    </item>
    
  </channel>
</rss>